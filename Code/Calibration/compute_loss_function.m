%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Filename: compute_loss_function.m
% Author: Nicholas von Turkovich
% Date: 11/8/2021
% Note(s): Takes in the targets, hyperparameters, and additional flags from
% calibration_deterministic.m along with NLOPT's current choice for the
% internally calibrated parameters (inputs) to compute the BGP moments and
% the SMM criterion
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [loss, moments] = compute_loss_function(inputs, targets, hyper_params, weights, flag_entry, flag_strwrite, strwrite)
    
    if flag_entry == 0
        
        % Produce the parameters of the economy
        econparams = generate_econparams_wrapper(inputs, hyper_params, flag_entry, false);
        
        % Solve for the BGP
        econparams_bgp = value_function_iteration_robust(econparams, true);
        
        % Produce the moments in the same order and units as the targets
        moments = [(power(1 + econparams_bgp.g,1/econparams.frequency)-1)*100,...
        econparams_bgp.rd_gdp*100,...
        (econparams_bgp.mean_gross_markup - 1)*100,...
        (econparams_bgp.median_gross_markup - 1)*100,...
        (econparams_bgp.pct75_gross_markup - 1)*100,...
        (econparams_bgp.pct90_gross_markup - 1)*100,...
        (econparams_bgp.pct95_gross_markup - 1)*100,...
        (econparams_bgp.pct99_gross_markup - 1)*100,...
        (econparams_bgp.std_markup)*100,...
        (econparams_bgp.FHK_WITHIN_adj_sh_5y)*100,...
        (econparams_bgp.innovation_output_mean)*100,...
        (econparams_bgp.innovation_output_pct90)*100,...
        (econparams_bgp.rd_leader_share)*100,...
        (econparams_bgp.mu(end))*100];
    
    else
        
        % Produce the parameters of the economy
        econparams = generate_econparams_wrapper(inputs, hyper_params, flag_entry, false);

        % Solve for the BGP
        econparams_bgp = value_function_iteration_robust(econparams, true);
        
        % Produce the moments in the same order and units as the targets
        moments = [(power(1 + econparams_bgp.g,1/econparams.frequency)-1)*100,...
        econparams_bgp.rd_gdp*100,...
        (econparams_bgp.mean_gross_markup - 1)*100,...
        (econparams_bgp.median_gross_markup - 1)*100,...
        (econparams_bgp.pct75_gross_markup - 1)*100,...
        (econparams_bgp.pct90_gross_markup - 1)*100,...
        (econparams_bgp.pct95_gross_markup - 1)*100,...
        (econparams_bgp.pct99_gross_markup - 1)*100,...
        (econparams_bgp.std_markup)*100,...
        (econparams_bgp.FHK_ENTRY_sh_5y)*100,...
        (econparams_bgp.innovation_output_mean)*100,...
        (econparams_bgp.innovation_output_pct90)*100,...
        (econparams_bgp.rd_leader_share)*100,...
        (econparams_bgp.mu(end))*100,...
        (econparams_bgp.emp5)*100,...
        (econparams_bgp.emp10)*100];
        
    end
    
    % Compute SMM criterion
    loss_numerator = abs(moments - targets);
    loss_denominator = 0.5*(abs(moments) + abs(targets));
    loss = sum(weights.*(loss_numerator./loss_denominator));
    
    % Write out the loss as well as the moments, weights, internally
    % calibrated parameters (note that these are written out in annual
    % decimals)
    if flag_strwrite
        if flag_entry == 0
            writematrix([loss, moments, weights, econparams.B/econparams.frequency, econparams.heta/econparams.frequency, econparams.lambda, econparams.phi, econparams.gamma, econparams.leap, econparams.n], strwrite, 'WriteMode', 'append')
        else
            writematrix([loss, moments, weights, econparams.B/econparams.frequency, econparams.heta/econparams.frequency, econparams.lambda, econparams.phi, econparams.B_e/econparams.frequency, econparams.phi_e, econparams.gamma, econparams.leap, econparams.n], strwrite, 'WriteMode', 'append')
        end
    end
end